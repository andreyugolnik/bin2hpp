/**********************************************\
*
*  Andrey A. Ugolnik
*  andrey@ugolnik.info
*
*  Binary to C array converter
*  by Andrey A. Ugolnik
*  based on BIN2HPP.CPP
*  by Shabarshin A. A. 02.09.2000, 10.03.2003
*
\**********************************************/

#include <cstdio>
#include <cstdlib>
#include <cstring>

int main(int argc, char* argv[])
{
    if (argc < 2)
    {
        printf("Binary to C array converter by Andrey A. Ugolnik.\n");
        printf("based on BIN2HPP.CPP by Shabarshin A. A.\n");
        printf("\n");
        printf("%s binary_file [options]\n", argv[0]);
        printf("     Options:\n");
        printf("      -s SIZE   - first SIZE bytes, whole binary_file by default.\n");
        printf("      -w WIDTH  - bytes per line, default 8.\n");
        printf("\n");
        return 1;
    }

    FILE* in = fopen(argv[1], "rb");
    if (in == NULL)
    {
        return 1;
    }
    int size = -1;
    int width = 8;
    for (int i = 2; i < argc; i++)
    {
        if (!strncmp(argv[i], "-w", 2))
        {
            width = atoi(argv[++i]);
        }
        else if (!strncmp(argv[i], "-s", 2))
        {
            size = atoi(argv[++i]);
        }
    }
    if (size == -1)
    {
        fseek(in, 0L, SEEK_END);
        size = ftell(in);
        fseek(in, 0L, SEEK_SET);
    }
    char str[100];
    strcpy(str, argv[1]);
    char str2[100];
    strcpy(str2, argv[1]);
    char* po = strrchr(str2, '.');
    if (po != NULL)
    {
        *po = 0;
    }
    strcat(str2, ".hpp");
    FILE* out = fopen(str2, "wt");
    if (out == NULL)
    {
        return 1;
    }
    for (int i = 0, length = strlen(str); i < length; i++)
    {
        if (str[i] >= 'A' && str[i] <= 'Z')
        {
            str[i] += 32;
        }
        if (!(str[i] >= 'a' && str[i] <= 'z') && !(str[i] >= '0' && str[i] <= '9'))
        {
            str[i] = '_';
        }
    }
    fprintf(out, "// Generated by bin2hpp\n");
    fprintf(out, "// https://bitbucket.org/andreyu/bin2hpp\n\n");
    fprintf(out, "static const size_t %s_size = %i;\n", str, size);
    fprintf(out, "static const unsigned char %s[] =\n{\n    ", str);
    for (int i = 0; i < size; i++)
    {
        fprintf(out, "0x%2.2X", fgetc(in));
        if (i != size - 1)
        {
            fputc(',', out);
        }
        if (i % width == width - 1)
        {
            fprintf(out, "\n    ");
        }
    }
    fprintf(out, "\n};\n\n");
    fclose(in);
    fclose(out);

    return 0;
}
